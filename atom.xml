<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://JoelynZhou.github.io</id>
    <title>JoelynZhou</title>
    <updated>2021-03-17T03:29:37.657Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://JoelynZhou.github.io"/>
    <link rel="self" href="https://JoelynZhou.github.io/atom.xml"/>
    <subtitle>多读书 / 多看报 / 少吃零食 / 多睡觉</subtitle>
    <logo>https://JoelynZhou.github.io/images/avatar.png</logo>
    <icon>https://JoelynZhou.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, JoelynZhou</rights>
    <entry>
        <title type="html"><![CDATA[【Git】git stash 相关记录]]></title>
        <id>https://JoelynZhou.github.io/post/git-git-stash-xiang-guan-ji-lu/</id>
        <link href="https://JoelynZhou.github.io/post/git-git-stash-xiang-guan-ji-lu/">
        </link>
        <updated>2020-07-22T09:54:29.000Z</updated>
        <content type="html"><![CDATA[<h3 id="alias-相关配置">alias 相关配置</h3>
<pre><code class="language-javascript">➜  gridea git:(master) ag gst
gst='git status'
gsta='git stash push'
gstaa='git stash apply'
gstall='git stash --all'
gstc='git stash clear'
gstd='git stash drop'
gstl='git stash list'
gstp='git stash pop'
gsts='git stash save'
gstss='git stash show --text'
gstu='git stash --include-untracked'
</code></pre>
<p>以上是我的 git stash 相关的 alias 配置，包括 zsh 自带的配置以及自己在.bashrc 里面的自定义配置，如何配置这里就不展开讲了。</p>
<p>下面介绍一下我们常用的几条 stash 命令：</p>
<p>(这里就直接用设置的快捷命令了)</p>
<ul>
<li>
<p><code>gstc</code> 清空栈</p>
</li>
<li>
<p><code>gsta</code> 将本地修改的代码推到栈内</p>
<pre><code class="language-javascript">➜  gridea git:(master) ✗ ga .
➜  gridea git:(master) ✗ gsta
Saved working directory and index state WIP on master: abe8de5 docs: update changelog
</code></pre>
</li>
<li>
<p><code>gstl</code> 查看栈</p>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggzu1rr18hj30rs03m3z7.jpg" alt="image-20200722163219458" loading="lazy"></figure>
</li>
<li>
<p><code>gsts</code> 在 <code>gsta</code> 的基础上可以自定义备注</p>
<pre><code class="language-javascript">➜  gridea git:(master) ✗ ga .
➜  gridea git:(master) ✗ gsts &quot;save 2222&quot;
Saved working directory and index state On master: save 2222
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggzucbk7o9j30rw06a75d.jpg" alt="image-20200722164230962" loading="lazy"></figure>
<ul>
<li>相比第一次提交，加了备注的提交更清晰</li>
<li>同时根据序列号也可以看出，stash 符合 <em><strong>先进先出</strong></em> 的规则</li>
</ul>
</li>
<li>
<p>查看某一次提交</p>
<figure data-type="image" tabindex="3"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggzuwaflrnj30dq043wer.jpg" alt="image-20200722170142682" loading="lazy"></figure>
<p>如上图，目前栈内有三次提交记录。</p>
<p><code>gstss</code> 默认查看最近的一次提交，相当于<code>gstss stash@{0}</code></p>
<p>如果想针对查看特定的提交，如 &quot;save 2222&quot; 的提交记录，需要在后面加上特定提交的序号<code>gstss stash@{1}</code> ，下面讲到的其他操作也是同理。</p>
<figure data-type="image" tabindex="4"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggzvhteg0nj30dx06fdga.jpg" alt="image-20200722172224034" loading="lazy"></figure>
</li>
<li>
<p>找到某次的提交记录后，需要将提交记录拷贝到本地，有两种方法：</p>
<ul>
<li><code>gstaa</code> 从栈中拷贝出提交到本地（栈中的记录仍保留）</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggzvpfmxrpj30b604vt90.jpg" alt="image-20200722172942558" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggzvq0q6otj30dn04hdg4.jpg" alt="image-20200722173017326" loading="lazy"></figure>
<ul>
<li>
<p><code>gstp</code> 从栈中推出某次提交（推出后，栈中不再留有这次提交记录）</p>
<figure data-type="image" tabindex="7"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggzvrxzfwhj30h905gwf5.jpg" alt="image-20200722173208224" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggzvscl25rj30dj033t8w.jpg" alt="image-20200722173231801" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>由 <code>gstp</code> 操作也可以看出，<code>gstd</code> 其实就是删除栈内特定的提交记录，如删除 <code>stash@{1}</code> 的记录</p>
<pre><code class="language-javascript">➜  gridea git:(master) ✗ gstd stash@{1}
Dropped stash@{1} (95485801bdcb11f2e81c916529b447ff4f1da02f)
</code></pre>
<figure data-type="image" tabindex="9"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggzw3yv09uj30ag02y74c.jpg" alt="image-20200722174340839" loading="lazy"></figure>
</li>
</ul>
<h3 id="总结">总结</h3>
<pre><code class="language-javascript">gst='git status'
gsta='git stash push'	//保存（不加说明）
gsts='git stash save'	//保存（加说明）
gstaa='git stash apply'	//复制某次提交到本地
gstp='git stash pop'	//复制某次提交到本地，并删除栈内记录
gstall='git stash --all'
gstc='git stash clear'	//清空栈
gstd='git stash drop'	//删除栈内某次提交记录
gstl='git stash list'	//查看栈内提交列表
gstss='git stash show --text'	//查看栈内某次提交记录
gstu='git stash --include-untracked'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浏览器新开 tab 遇到的问题记录]]></title>
        <id>https://JoelynZhou.github.io/post/liu-lan-qi-xin-kai-tab-yu-dao-de-wen-ti-ji-lu/</id>
        <link href="https://JoelynZhou.github.io/post/liu-lan-qi-xin-kai-tab-yu-dao-de-wen-ti-ji-lu/">
        </link>
        <updated>2020-07-16T12:19:08.000Z</updated>
        <content type="html"><![CDATA[<h2 id="页面跳转的两种方法">页面跳转的两种方法</h2>
<h3 id="onclick-跳转">Onclick 跳转</h3>
<pre><code class="language-javascript">window.location.href=&quot;URL&quot;;//覆盖当前页
</code></pre>
<pre><code class="language-javascript">window.open(&quot;URL&quot;,&quot;_blank&quot;);//新窗口打开
window.open(&quot;URL&quot;,&quot;_self&quot;);//覆盖当前页
</code></pre>
<p>若一直通过新窗口打开，会打开很多相同的页面，根据当前页面是否打开决定是新开标签页还是跳转：</p>
<pre><code class="language-javascript">window.open(&quot;URL&quot;,&quot;PageTitle&quot;);
</code></pre>
<p>上述代码存在问题：</p>
<ul>
<li><strong>Firefox 下存在兼容性问题，对已打开的页面不能成功跳转！！！</strong></li>
</ul>
<h4 id="解决方案">解决方案：</h4>
<pre><code class="language-javascript">const winRef=window.open(&quot;URL&quot;,&quot;PageTitle&quot;);
winRef.focus(); // 兼容 Firefox 无法跳转问题
</code></pre>
<h3 id="a-标签跳转">a 标签跳转</h3>
<pre><code class="language-html">&lt;!--新窗口打开--&gt;
&lt;a href=&quot;URL&quot; target=&quot;_blank&quot;&gt;&lt;/a&gt;
</code></pre>
<pre><code class="language-html">&lt;!--覆盖当前页--&gt;
&lt;a href=&quot;URL&quot; target=&quot;_self&quot;&gt;&lt;/a&gt;
</code></pre>
<h4 id="a-标签下实现页面不重复的打开">a 标签下实现页面不重复的打开：</h4>
<pre><code class="language-html">&lt;!--覆盖当前页--&gt;
&lt;a href=&quot;URL&quot; target=&quot;PageTitle&quot;&gt;&lt;/a&gt;
</code></pre>
<p>上述方案无需考虑兼容性。</p>
<p><em><strong>注意：PageTitle 为当前页面的 title，URL为当前页面的链接。</strong></em></p>
<h3 id="demo">DEMO</h3>
<h4 id="目录结构">目录结构：</h4>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ggt2uctn0yj309o05kglo.jpg" alt="image-20200716201741837" loading="lazy"></figure>
<h4 id="ahtml">a.html</h4>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Page1&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;a href=&quot;b.html&quot; target=&quot;Page2&quot;&gt;Page a&lt;/a&gt;
    &lt;button onclick={openWin()}&gt;openWindow&lt;/button&gt;
    &lt;script&gt;
        function openWin(){
            const ref=window.open(&quot;b.html&quot;,&quot;Page2&quot;);
            ref.focus();
        }
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<h4 id="bhtml">b.html</h4>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Page2&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;a href=&quot;a.html&quot; target=&quot;Page1&quot;&gt;Page b&lt;/a&gt;
    &lt;button onclick={openWin()}&gt;openWindow&lt;/button&gt;
    &lt;script&gt;
        function openWin(){
            const ref=window.open(&quot;a.html&quot;,&quot;Page1&quot;);
            ref.focus();
        }
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[面试题51. 数组中的逆序对]]></title>
        <id>https://JoelynZhou.github.io/post/mian-shi-ti-51-shu-zu-zhong-de-ni-xu-dui/</id>
        <link href="https://JoelynZhou.github.io/post/mian-shi-ti-51-shu-zu-zhong-de-ni-xu-dui/">
        </link>
        <updated>2020-04-24T02:49:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>
<ul>
<li>0 &lt;= 数组长度 &lt;= 50000</li>
</ul>
<h2 id="示例">示例</h2>
<pre><code>输入: [7,5,6,4]
输出: 5
</code></pre>
<h2 id="分析">分析</h2>
<ul>
<li>逆序对反映了一个数组的有序程度。</li>
</ul>
<p>思路 1：暴力解法</p>
<ul>
<li>遍历求出每个数字后面比他小的数字个数和</li>
<li>时间复杂度 O(n^2)</li>
<li>空间复杂度 O(1)</li>
<li>结果：计算结果超时</li>
</ul>
<p>思路 2：归并排序</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[199. 二叉树的右视图]]></title>
        <id>https://JoelynZhou.github.io/post/199-er-cha-shu-de-you-shi-tu/</id>
        <link href="https://JoelynZhou.github.io/post/199-er-cha-shu-de-you-shi-tu/">
        </link>
        <updated>2020-04-23T02:17:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p>
<h2 id="示例">示例</h2>
<pre><code>输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]
解释:

   1            &lt;---
 /   \
2     3         &lt;---
 \     \
  5     4       &lt;---
</code></pre>
<h2 id="分析">分析</h2>
<p>本题可以看成是求二叉树每层的最后一个数据组成的数组。</p>
<h2 id="题解">题解</h2>
<pre><code class="language-javascript">/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @return {number[]}
 */
var rightSideView = function(root) {
	if (!root) return [];
	let arr = []; // 暂存每层数据
	let res = []; // 存储每层最后一个数据
	arr.push(root);
	while (arr.length &gt; 0) {
		res.push(arr[arr.length - 1].val); //将每层最后一个数据存入数组
		let len = arr.length;
		while (len &gt; 0) {
			let now = arr.shift();
			if (now.left != null) arr.push(now.left);
			if (now.right != null) arr.push(now.right);
			len--;
		}
	}
	return res;
};
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge3hgpt46gj30s6078aa8.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1248. 统计「优美子数组」]]></title>
        <id>https://JoelynZhou.github.io/post/1248-tong-ji-you-mei-zi-shu-zu/</id>
        <link href="https://JoelynZhou.github.io/post/1248-tong-ji-you-mei-zi-shu-zu/">
        </link>
        <updated>2020-04-21T15:11:25.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>给你一个整数数组 nums 和一个整数 k。</p>
<p>如果某个 连续 子数组中恰好有 k 个奇数数字，我们就认为这个子数组是「优美子数组」。</p>
<p>请返回这个数组中「优美子数组」的数目。</p>
<h2 id="示例">示例</h2>
<pre><code>输入：nums = [1,1,2,1,1], k = 3
输出：2
解释：包含 3 个奇数的子数组是 [1,1,2,1] 和 [1,2,1,1] 。

输入：nums = [2,2,2,1,2,2,1,2,2,2], k = 2
输出：16
</code></pre>
<h2 id="分析">分析</h2>
<p>本题难在考察边界条件。</p>
<h2 id="题解">题解</h2>
<pre><code class="language-javascript">/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var numberOfSubarrays = function(nums, k) {
	let count = 0;
	let arr = []; // 用于放置奇数下标
	for (let i = 0; i &lt; nums.length; i++) {
		if (nums[i] % 2 === 1) {
			arr.push(i);
		}
	}
	if (arr.length &lt; k) {
		return count;
	}
	for (let i = 0; i + k - 1 &lt; arr.length; i++) {
		const j = i + k - 1; // 左下标 i，右下标 i+k-1
		const left = i === 0 ? arr[i] + 1 : arr[i] - arr[i - 1];
		const right = j === arr.length - 1 ? nums.length - arr[j] : arr[j + 1] - arr[j];
		count += left * right;
	}
	return count;
};
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1ge1sl1096vj30j604vwei.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[200. 岛屿数量]]></title>
        <id>https://JoelynZhou.github.io/post/200-dao-yu-shu-liang/</id>
        <link href="https://JoelynZhou.github.io/post/200-dao-yu-shu-liang/">
        </link>
        <updated>2020-04-20T13:20:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>
<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p>
<p>此外，你可以假设该网格的四条边均被水包围。</p>
<h2 id="示例">示例</h2>
<pre><code>输入:
11110
11010
11000
00000
输出: 1

输入:
11000
11000
00100
00011
输出: 3
解释: 每座岛屿只能由水平和/或竖直方向上相邻的陆地连接而成。
</code></pre>
<h2 id="分析">分析</h2>
<p>思路：DFS<br>
跟离陆地最远的海洋问题类似。<br>
一旦发现岛屿，计数，沉岛，查看岛屿边界；</p>
<h2 id="题解">题解</h2>
<pre><code class="language-javascript">/**
 * @param {character[][]} grid
 * @return {number}
 */
var numIslands = function(grid) {
   const mark=(x,y)=&gt;{
        if(x&lt;0 || y&lt;0 || x&gt;=m || y&gt;=n){
            return;
        }
        if(grid[x][y]===&quot;1&quot;){
            grid[x][y]=&quot;0&quot;;
            mark(x-1,y);
            mark(x+1,y);
            mark(x,y-1);
            mark(x,y+1);
        }
    }

    if(grid.length===0){
        return 0;
    }
    const m=grid.length;const n=grid[0].length;
    let count=0;
    for(let i=0;i&lt;m;i++){
        for(let j=0;j&lt;n;j++){
            if(grid[i][j]===&quot;1&quot;){
                count++;    //发现一块新岛屿
                // 标记岛屿直到边界
                mark(i,j);
            }
        }
    }
    return count;
};
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[466. 统计重复个数]]></title>
        <id>https://JoelynZhou.github.io/post/466-tong-ji-chong-fu-ge-shu/</id>
        <link href="https://JoelynZhou.github.io/post/466-tong-ji-chong-fu-ge-shu/">
        </link>
        <updated>2020-04-19T08:10:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>由 n 个连接的字符串 s 组成字符串 S，记作 S = [s,n]。例如，[&quot;abc&quot;,3]=“abcabcabc”。</p>
<p>如果我们可以从 s2 中删除某些字符使其变为 s1，则称字符串 s1 可以从字符串 s2 获得。例如，根据定义，&quot;abc&quot; 可以从 “abdbec” 获得，但不能从 “acbbe” 获得。</p>
<p>现在给你两个非空字符串 s1 和 s2（每个最多 100 个字符长）和两个整数 0 ≤ n1 ≤ 10^6 和 1 ≤ n2 ≤ 10^6。现在考虑字符串 S1 和 S2，其中 S1=[s1,n1] 、S2=[s2,n2] 。</p>
<p>请你找出一个可以满足使[S2,M] 从 S1 获得的最大整数 M 。</p>
<h2 id="示例">示例</h2>
<pre><code class="language-javascript">输入：
s1 =&quot;acb&quot;,n1 = 4
s2 =&quot;ab&quot;,n2 = 2

返回：
2
</code></pre>
<h2 id="分析">分析</h2>
<ul>
<li>n1,n2 很大，没有办法吧 S1,S2 按照循环写出链式结果</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[11. 盛最多水的容器]]></title>
        <id>https://JoelynZhou.github.io/post/11-sheng-zui-duo-shui-de-rong-qi/</id>
        <link href="https://JoelynZhou.github.io/post/11-sheng-zui-duo-shui-de-rong-qi/">
        </link>
        <updated>2020-04-19T07:32:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p>
<p>说明：你不能倾斜容器，且 n 的值至少为 2。</p>
<figure data-type="image" tabindex="1"><img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" alt="" loading="lazy"></figure>
<p>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p>
<h2 id="示例">示例</h2>
<pre><code>输入：[1,8,6,2,5,4,8,3,7]
输出：49
</code></pre>
<h2 id="分析">分析</h2>
<p>考点：双指针</p>
<p>跟接雨水的题很像，但是比那道题更简单，接雨水本质上是若干柱子组成的不规则图形的面积，而这里只需要考虑首尾柱子构成的矩形面积。</p>
<h2 id="题解">题解</h2>
<pre><code class="language-javascript">/**
 * @param {number[]} height
 * @return {number}
 */
var maxArea = function (height) {
    let m=0;n=height.length-1;
    let max=0;
    while(m&lt;n){
        max=Math.max(max,(n-m)*Math.min(height[m],height[n]));
        if(height[m]&gt;=height[n]){
            n--;
        }else{
            m++;
        }
    }
    return max;
};
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdz42k4vtjj30ic04eglm.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[55. 跳跃游戏]]></title>
        <id>https://JoelynZhou.github.io/post/55-tiao-yue-you-xi/</id>
        <link href="https://JoelynZhou.github.io/post/55-tiao-yue-you-xi/">
        </link>
        <updated>2020-04-17T05:06:18.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p>
<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p>
<p>判断你是否能够到达最后一个位置。</p>
<h2 id="示例">示例</h2>
<pre><code>输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
</code></pre>
<h2 id="分析">分析</h2>
<p>思路 1：贪心算法</p>
<ul>
<li>遍历每一个能调到的最远距离内的点</li>
<li>更新最远距离</li>
<li>如果遍历的点超出了最远距离，则说明当前最远距离无法到达最后，return false</li>
<li>否则，return true</li>
</ul>
<p>思路 2：动态规划</p>
<ul>
<li>从后往前，判断倒数第二个元素能否到达最后一个元素，如果可以，则将最后一个元素移出考虑范围</li>
</ul>
<h2 id="题解-1">题解 1</h2>
<pre><code class="language-javascript">/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canJump = function(nums) {
    let k=0; // 能跳的最远距离
    for(let i=0;i&lt;nums.length;i++){
        if(i&gt;k){
            return false;
        }
        k=Math.max(k,i+nums[i]);
    }
    return true;
};
</code></pre>
<h2 id="题解-2">题解 2</h2>
<pre><code class="language-javascript">/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canJump = function(nums) {
    if(nums.length===0){
        return false;
    }
    let dp=new Array(nums.length).fill(false);
    dp[0]=true; // 第 0 个位置可达
    for(let i=1;i&lt;nums.length;i++){
        for(let j=0;j&lt;i;j++){
            if(dp[j] &amp;&amp; nums[j]+j &gt;= i){
                dp[i]=true;
                break;  // 第 i 个位置可达，则不用再判断 dp[i]，调到下一个循环
            }
        }
    }
    return dp[nums.length-1];
};
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gdwom2sfoqj30i404qjrf.jpg" alt="" loading="lazy"></figure>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://leetcode-cn.com/problems/jump-game/solution/55-by-ikaruga/">【跳跃游戏】别想那么多，就挨着跳吧</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[57. 插入区间]]></title>
        <id>https://JoelynZhou.github.io/post/57-cha-ru-qu-jian/</id>
        <link href="https://JoelynZhou.github.io/post/57-cha-ru-qu-jian/">
        </link>
        <updated>2020-04-16T12:51:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>给出一个无重叠的 ，按照区间起始端点排序的区间列表。</p>
<p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p>
<h2 id="示例">示例</h2>
<pre><code>输入: intervals = [[1,3],[6,9]], newInterval = [2,5]
输出: [[1,5],[6,9]]

输入: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
输出: [[1,2],[3,10],[12,16]]
解释: 这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。
</code></pre>
<h2 id="分析-1">分析 1</h2>
<p>用 56 题合并区间的思路解决：<br>
- 插入的区间与原区间集合合并（不考虑顺序）<br>
- 排序 并 合并区间</p>
<h2 id="题解-1">题解 1</h2>
<pre><code class="language-javascript">/**
 * @param {number[][]} intervals
 * @param {number[]} newInterval
 * @return {number[][]}
 */
var insert = function(intervals, newInterval) {
    // 过滤掉区间集合中被新区间包含的点
    intervals=intervals.filter(x=&gt; x[0]&lt; newInterval[0] || x[1]&gt;newInterval[1])
    intervals.splice(intervals.length,0,newInterval);
    intervals=intervals.sort((a,b)=&gt; a[0]-b[0]);
    return merge(intervals);
};

var merge = function(intervals) {
    // 区间集合长度小于 1时，不需要合并，返回自身
    if(intervals.length&lt;=1){
        return intervals;
    }
    // 将最小的区间放入集合开头
    let res=intervals.slice(0,1);
    // 从第二个元素开始，遍历整个区间集合，依次与开始区间较小的那个区间（输出集合的最后一个区间）进行比较
    for(let i=1;i&lt;intervals.length;i++){
        // 如果待比较的两个区间有重合，则将两个区间合并（更新 输出集合的最后一个区间）
        // 即：较大的开始区间 小于等于 较小区间的结束区间
        if(intervals[i][0]&lt;=res[res.length-1][1]){
            res[res.length-1][1]=Math.max(res[res.length-1][1],intervals[i][1]);
        }else{
            res.push(intervals[i]); // 待比较的两个区间没有交集，不做合并，直接存入输出集合末尾
        }
    }
    return res;
};
</code></pre>
]]></content>
    </entry>
</feed>