<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://JoelynZhou.github.io</id>
    <title>JoelynZhou</title>
    <updated>2020-04-01T02:14:52.205Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://JoelynZhou.github.io"/>
    <link rel="self" href="https://JoelynZhou.github.io/atom.xml"/>
    <subtitle>多读书 / 多看报 / 少吃零食 / 多睡觉</subtitle>
    <logo>https://JoelynZhou.github.io/images/avatar.png</logo>
    <icon>https://JoelynZhou.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, JoelynZhou</rights>
    <entry>
        <title type="html"><![CDATA[912. 排序数组]]></title>
        <id>https://JoelynZhou.github.io/post/912-pai-xu-shu-zu/</id>
        <link href="https://JoelynZhou.github.io/post/912-pai-xu-shu-zu/">
        </link>
        <updated>2020-03-31T15:11:17.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gde1ljl9dwj31ca0u0jvt.jpg" alt="" loading="lazy"></figure>
<h2 id="题解-1">题解 1</h2>
<pre><code class="language-javascript">/**
 * @param {number[]} nums
 * @return {number[]}
 */
var sortArray = function(nums) {
    return nums.sort((a,b)=&gt; a-b);
};
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gddikgsevej30ey02dq2v.jpg" alt="" loading="lazy"></figure>
<h2 id="题解-2">题解 2</h2>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">维基百科-排序算法</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[面试题62. 圆圈中最后剩下的数字]]></title>
        <id>https://JoelynZhou.github.io/post/mian-shi-ti-62-yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi/</id>
        <link href="https://JoelynZhou.github.io/post/mian-shi-ti-62-yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi/">
        </link>
        <updated>2020-03-30T14:11:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>
<p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p>
<h2 id="示例">示例</h2>
<pre><code class="language-javascript">输入: n = 5, m = 3
输出: 3
</code></pre>
<pre><code class="language-javascript">输入: n = 10, m = 17
输出: 2
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1162. 地图分析]]></title>
        <id>https://JoelynZhou.github.io/post/1162-di-tu-fen-xi/</id>
        <link href="https://JoelynZhou.github.io/post/1162-di-tu-fen-xi/">
        </link>
        <updated>2020-03-29T11:12:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。</p>
<p>我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。</p>
<p>如果我们的地图上只有陆地或者海洋，请返回 -1。</p>
<h2 id="示例">示例</h2>
<p>输入：[[1,0,1],[0,0,0],[1,0,1]]<br>
输出：2<br>
解释：<br>
海洋区域 (1, 1) 和所有陆地区域之间的距离都达到最大，最大距离为 2。<br>
<img src="https://pic.leetcode-cn.com/23e21821e14238829dd7021a620895f40a8e42127cfe372e4791d025bb655afc.jpg" alt="" loading="lazy"></p>
<h2 id="分析">分析</h2>
<p>参考链接：<a href="https://leetcode-cn.com/problems/as-far-from-land-as-possible/solution/zhen-liang-yan-sou-huan-neng-duo-yuan-kan-wan-miao/">参考链接点这里</a></p>
<p>花了好长时间去理解题意，距离最近的陆地区域的最远距离，究竟是最远距离还是最近距离，后来看了链接中大佬画的 GIF 瞬间明白了，这道题或许换个模型更容易理解。</p>
<p>我脑补的模型：</p>
<ul>
<li>背景：
<ul>
<li>病毒在封闭人群中的传播（可能是最近瘟疫公司玩多了的缘故 orz）；</li>
</ul>
</li>
<li>假设：
<ul>
<li>将陆地看成是感染人员，每个感染人员 每天 都会感染周围的人，然后 第二天新感染的人员又会感染周围的人，问：你以上帝视角，站在人群中什么位置，才是最晚被感染的人（人类之光格陵兰）。</li>
</ul>
</li>
<li>思路：
<ul>
<li>第一天，算出被 0 号病人感染的人，剩下没感染的还有多少人</li>
<li>第二天，算出被 第一天感染的人 感染的人，剩下没感染多少人</li>
<li>……</li>
<li>第 N 天，已经没有被感染的人了</li>
<li>得到 N</li>
</ul>
</li>
</ul>
<h2 id="题解">题解</h2>
<pre><code class="language-javascript">/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxDistance = function (grid) {
    let land = []; // 陆地源数组
    let level = 0; // 返回层级
    for (let i = 0; i &lt; grid.length; i++) {
        for (let j = 0; j &lt; grid[i].length; j++) {
            if (grid[i][j] === 1) {
                land.push([i, j]);
            }
        }
    }
    let ocean = grid.length * grid.length - land.length; // 海洋的格数
    // 全是海洋或者陆地，返回 -1
    if (land.length === 0 || ocean === 0) {
        return -1;
    }
    while (ocean &gt; 0) {
        level++;
        const temp = [];
        for (let i = 0; i &lt; land.length; i++) {
            const [x, y] = [land[i][0], land[i][1]];
            // 判断 上下左右 相邻的点是否有海洋
            for (let j = 0; j &lt; 4; j++) {
                // 边界条件校验
                if (
                    x + dx[j] &lt; 0 ||
                    y + dy[j] &lt; 0 ||
                    x + dx[j] &gt; grid.length - 1 ||
                    y + dy[j] &gt; grid[0].length - 1
                ) {
                    continue;
                }
                // 如果发现是海洋，则标记 2（这里其实只要是非 0，其他数都可以，只为了跟未知海洋作区分），防止被重复计算
                if (grid[x + dx[j]][y + dy[j]] === 0) {
                    grid[x + dx[j]][y + dy[j]] = 2;
                    temp.push([x + dx[j], y + dy[j]]);
                    // 每发现一个新海洋，剩下的海洋格数就减少 1
                    ocean--;
                }
            }
        }
        land = temp; // 一轮扩散结束后，新扩散将代替源陆地存入 land，开始新的一轮扩散
    }
    return level;
};
const dx = [1, -1, 0, 0];
const dy = [0, 0, 1, -1];
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gdb0fcx1xwj30g202ya9z.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[820. 单词的压缩编码]]></title>
        <id>https://JoelynZhou.github.io/post/820-dan-ci-de-ya-suo-bian-ma/</id>
        <link href="https://JoelynZhou.github.io/post/820-dan-ci-de-ya-suo-bian-ma/">
        </link>
        <updated>2020-03-28T15:34:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>给定一个单词列表，我们将这个列表编码成一个索引字符串 S 与一个索引列表 A。</p>
<p>例如，如果这个列表是 [&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]，我们就可以将其表示为 S = &quot;time#bell#&quot; 和 indexes = [0, 2, 5]。</p>
<p>对于每一个索引，我们可以通过从字符串 S 中索引的位置开始读取字符串，直到 &quot;#&quot; 结束，来恢复我们之前的单词列表。</p>
<p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p>
<h2 id="示例">示例</h2>
<p>输入: words = [&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]<br>
输出: 10<br>
说明: S = &quot;time#bell#&quot; ， indexes = [0, 2, 5] 。</p>
<h2 id="分析">分析</h2>
<ol>
<li>最初想法<br>
首先匹配子串会让人想到 Trie 树，但本题题意是匹配后缀，所以会想到把单词翻转，构造前缀树条件，生成前缀树，计算每一个子节点到父节点的距离（ # 相当于根节点，所以需要算上根节点的个数 1 ）。</li>
<li>在此基础上的思考<br>
既然每个节点的共享部分都需要反复计算，那么是不是可以理解为，其实过滤掉不用计算的是<strong>整个单词能匹配到其他单词</strong>的情况（包含关系，而不是半包含关系），那么只需要遍历每个单词，过滤掉当前单词的所有后缀以独立单词存在的情况，再对剩下的单词长度求和（别忘了根节点）即可。</li>
</ol>
<h2 id="题解">题解</h2>
<pre><code class="language-javascript">/**
 * @param {string[]} words
 * @return {number}
 */
var minimumLengthEncoding = function (words) {
    let set = new Set(words);
    for (let word of set) {
        for (let i = 1; i &lt; word.length; i++) {
            let temp = word.slice(i);
            set.has(temp) &amp;&amp; set.delete(temp);
        }
    }
    let res = [...set].reduce((acc,cur)=&gt;{
        return acc+cur.length+1;
    },0)
    return res;
};
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gda2e0qzo9j30i60370sp.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[914. 卡牌分组]]></title>
        <id>https://JoelynZhou.github.io/post/914-qia-pai-fen-zu/</id>
        <link href="https://JoelynZhou.github.io/post/914-qia-pai-fen-zu/">
        </link>
        <updated>2020-03-27T14:58:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>给定一副牌，每张牌上都写着一个整数。</p>
<p>此时，你需要选定一个数字 X，使我们可以将整副牌按下述规则分成 1 组或更多组：</p>
<p>每组都有 X 张牌。<br>
组内所有的牌上都写着相同的整数。<br>
仅当你可选的 X &gt;= 2 时返回 true。</p>
<h2 id="示例">示例</h2>
<pre><code>输入：[1,2,3,4,4,3,2,1]
输出：true
解释：可行的分组是 [1,1]，[2,2]，[3,3]，[4,4]
</code></pre>
<pre><code>输入：[1,1,2,2,2,2]
输出：true
解释：可行的分组是 [1,1]，[2,2]，[2,2]
</code></pre>
<h2 id="分析">分析</h2>
<p>本质是求每张牌个数组成的数组的最大公约数是否大于2。<br>
求最大公约数：</p>
<ol>
<li>辗转相除法</li>
</ol>
<h2 id="题解">题解</h2>
<pre><code class="language-javascript">/**
 * @param {number[]} deck
 * @return {boolean}
 */
var hasGroupsSizeX = function(deck) {
    let map = new Map();
    for(let n of deck){
        map.set(n,map.has(n)?map.get(n)+1:1);
    }
    const arr = [...map.values()];
    let res = arr[0];
    return arr.every(i =&gt; (res = gcd(res, i)) &gt; 1);
};
const gcd = (a, b) =&gt; (b === 0 ? a : gcd(b, a % b));
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd8vq9ma1sj30oo05imxa.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[1. 两数之和]]></title>
        <id>https://JoelynZhou.github.io/post/1-liang-shu-zhi-he/</id>
        <link href="https://JoelynZhou.github.io/post/1-liang-shu-zhi-he/">
        </link>
        <updated>2020-03-26T14:02:19.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<h2 id="示例">示例</h2>
<pre><code>给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 [0, 1]
</code></pre>
<h2 id="分析">分析</h2>
<ol>
<li>粗暴遍历：<br>
算法复杂度 O(n^2)</li>
<li>Hash 查找：<br>
哈希表的查找复杂度是 O(1)，<br>
所以整体复杂度 O(n)</li>
</ol>
<h2 id="题解">题解</h2>
<pre><code class="language-javascript">/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 * 分析：
 * 基于 哈希表的查找复杂度是 O(1)
 * 通过哈希表，遍历一次，算法复杂度O(n)
 */
var twoSum = function(nums, target) {
    const hashMap=new Map();
    for(let i=0;i&lt;nums.length;i++){
        if(hashMap.has(target-nums[i])){
            return [hashMap.get(target-nums[i]),i];
        }
        hashMap.set(nums[i],i);
    }
    return [];
};
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd7ohikwrnj30pu04474c.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[999. 车的可用捕获量]]></title>
        <id>https://JoelynZhou.github.io/post/999-che-de-ke-yong-bu-huo-liang/</id>
        <link href="https://JoelynZhou.github.io/post/999-che-de-ke-yong-bu-huo-liang/">
        </link>
        <updated>2020-03-26T07:26:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>在一个 8 x 8 的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符 “R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。</p>
<p>车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。</p>
<p>返回车能够在一次移动中捕获到的卒的数量。</p>
<p><a href="https://assets.leetcode-cn.com/solution-static/999_fig1.gif">Gif 点击这里</a></p>
<h2 id="测试用例">测试用例</h2>
<pre><code>输入：[[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;R&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;p&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;]]
输出：3
解释：
在本例中，车能够捕获所有的卒。
</code></pre>
<h2 id="分析">分析</h2>
<p>考察方向数组的问题：</p>
<ol>
<li>暴力法：<br>
四层 for 循环</li>
<li>奇思妙解：<br>
通过创建平面坐标系来解决</li>
</ol>
<h2 id="题解">题解</h2>
<pre><code class="language-javascript">/**
 * @param {character[][]} board
 * @return {number}
 * 分析：
 * 考察方向数组的问题
 * 暴力法：
 * 四层 for 循环
 * 奇思妙解：
 * 通过创建平面坐标系来解决
 */
var numRookCaptures = function(board) {
    let result=0;
    for(let i=0;i&lt;board.length;i++){
        for(let j=0;j&lt;board[i].length;j++){
            //找到 R 的位置
            if(board[i][j]===&quot;R&quot;){
                //R 为原点创建坐标系
                //向四个方向查找
                return rampage(board,i,j,0,1)+rampage(board,i,j,0,-1)+rampage(board,i,j,1,0)+rampage(board,i,j,-1,0);
            }
        }
    }
};

/**
 * @param {board:做标数据，x,y: R 的坐标; dx,dy:步长}
 */
var rampage=(board,x,y,dx,dy)=&gt;{
    while(x&gt;=0 &amp;&amp; x&lt;board.length &amp;&amp; y&gt;=0 &amp;&amp; y&lt;board[x].length &amp;&amp; board[x][y]!==&quot;B&quot;){
        if(board[x][y]===&quot;p&quot;){
            return 1;
        }
        x+=dx;
        y+=dy;
    }
    return 0;
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd7d8br0n5j30oa0403yk.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[892. 三维形体的表面积]]></title>
        <id>https://JoelynZhou.github.io/post/892-san-wei-xing-ti-de-biao-mian-ji/</id>
        <link href="https://JoelynZhou.github.io/post/892-san-wei-xing-ti-de-biao-mian-ji/">
        </link>
        <updated>2020-03-26T03:44:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目">题目</h2>
<p>在 N * N 的网格上，我们放置一些 1 * 1 * 1  的立方体。<br>
每个值 v = grid[i][j] 表示 v 个正方体叠放在对应单元格 (i, j) 上。<br>
请你返回最终形体的表面积。</p>
<ul>
<li>1 &lt;= N &lt;= 50</li>
<li>0 &lt;= grid[i][j] &lt;= 50</li>
</ul>
<h2 id="测试用例">测试用例</h2>
<pre><code class="language-javascript">输入：[[2]]
输出：10
</code></pre>
<pre><code class="language-javascript">输入：[[1,2],[3,4]]
输出：34
</code></pre>
<h2 id="分析">分析</h2>
<p>计算不规则立方体堆的表面积，rid[i][j]表示第 i 行 第 j 列的方块个数</p>
<ol>
<li>先假设每一摞的立方体互不接触：<br>
通过遍历累加，可以计算出每一摞立方体的表面积及不接触情况下的总表面积</li>
<li>再考虑接触的需要减去的部分：<br>
一旦两摞立方体接触，那么被抵消掉的表面积应该是较矮的那一摞的高度*2</li>
<li>关于计算顺序:<br>
可以假设从第 0 行第 0 列开始，<br>
每次新增一摞的时候，加上把当前摞作为独立情况下的表面积，同时减去与左侧，上侧有接触面时抵消掉的面积，直到第 i 行第 j 列结束循环体，输出结果</li>
</ol>
<h3 id="题解">题解</h3>
<pre><code class="language-javascript">/**
 * @param {number[][]} grid
 * @return {number}
 */
var surfaceArea = function(grid) {
    let result=0;
    for(let i=0;i&lt;grid.length;i++){
        for(let j=0;j&lt;grid[i].length;j++){
            if(grid[i][j]&gt;0){
                result+=grid[i][j]*4+2;
            }
            if(i&gt;0){
                result -= Math.min(grid[i-1][j],grid[i][j])*2;
            }
            if(j&gt;0){
                result -= Math.min(grid[i][j-1],grid[i][j])*2;
            }
        }
    }
    return result;
};
</code></pre>
<h3 id="性能">性能</h3>
<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd7a7rj549j30p003q3yk.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[macOS 壁纸 - VSC 快捷键]]></title>
        <id>https://JoelynZhou.github.io/post/macos-bi-zhi-vsc-kuai-jie-jian/</id>
        <link href="https://JoelynZhou.github.io/post/macos-bi-zhi-vsc-kuai-jie-jian/">
        </link>
        <updated>2020-01-16T09:46:00.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gayjtquzr5j31uz0u0gnn.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[macOS 壁纸 - 小鹤双拼]]></title>
        <id>https://JoelynZhou.github.io/post/macos-bi-zhi-xiao-he-shuang-pin/</id>
        <link href="https://JoelynZhou.github.io/post/macos-bi-zhi-xiao-he-shuang-pin/">
        </link>
        <updated>2020-01-16T09:43:43.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gayjkzgvvij31c00u0di9.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>